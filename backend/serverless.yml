# TODO: Change the name of the org 
org: thanhluong
app: serverless-item-app
service: serverless-item-app
frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: serverless
  tracing:
    # It is possible to trace function calls and display corresponding logs in the AWS X-Ray service
    lambda: true
    # You can track requests and responses from the API Gateway
    apiGateway: true

  # define env variables
  environment:
    ITEMS_TABLE: item-table-${self:provider.stage}
    ITEMS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-item-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: serverless-item-app
    INDEX_NAME: ${self:provider.environment.ITEMS_CREATED_AT_INDEX}
  # Enable API Gateway logs
  logs:
    # Enable API Gateway logs
    restApi: true

# Define resources such as topics  
custom:
  topicName: item-imagesTopic-${self:provider.stage}
# Define services functions
functions:
  # Authen function 
  Auth:
    # Define IAM policies
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:  
    #Allows the function to perform two actions of the AWS X-Ray service  
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments   
      #Allowed to perform X-Ray actions on all resources      
      Resource: "*"

  # GetItem function 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetItems:
    handler: src/lambda/http/getItems.handler
    events:
      # Activated by an HTTP request
      - http:
          method: get
          path: items
          # Enable CORS (Cross-Origin Resource Sharing) for HTTP requests
          cors: true
          # Call authentication before executing the function
          authorizer: Auth
    # Specify the names of the IAM Role Statements defining access for the GetItem function
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-item-role-${self:provider.stage}
    
    iamRoleStatements:
      # Allow the function to perform query actions on the DynamoDB table resource
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      # Allow the function to perform query actions on the DynamoDB table index resource
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}/index/${self:provider.environment.ITEMS_CREATED_AT_INDEX}
      # Allow the function to perform the PutTraceSegments action on all resources
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  # CreateItem function 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateItem:
    handler: src/lambda/http/createItem.handler
    events:
      - http:
          method: post
          path: items
          # Enable CORS (Cross-Origin Resource Sharing) for HTTP requests
          cors: true
          # Call authentication before executing the function
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-item-model.json)}
        iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-item-role-${self:provider.stage}
    iamRoleStatements:
      # Allow the function to perform PutItem actions on the DynamoDB table resource
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      # Allow the function to perform the PutTraceSegments action on all resources
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  # UpdateItem function 
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateItem:
    handler: src/lambda/http/updateItem.handler
    events:
      - http:
          method: patch
          path: items/{itemId}
          # Enable CORS (Cross-Origin Resource Sharing) for HTTP requests
          cors: true
          # Call authentication before executing the function
          authorizer: Auth
          # Define the data structure that the UpdateItem function expects when receiving an HTTP POST request to the /items path.
          request:
            schemas:
              application/json: ${file(models/update-item-model.json)}
    iamRoleStatements:
        # Allow the function to perform UpdateItem actions on the DynamoDB table resource
        - Effect: Allow
          Action:            
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
        # Allow the function to perform UpdateItem actions on the DynamoDB table index resource
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}/index/${self:provider.environment.INDEX_NAME}
        # Allow the function to perform the PutTraceSegments and PutTelemetryRecords actions on all resources
        - Effect: Allow
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource:
            - "*"      

  # DeleteItem function 
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteItem:
    handler: src/lambda/http/deleteItem.handler
    events:
      - http:
          method: delete
          path: items/{itemId}
          # Call authentication before executing the function
          authorizer: Auth
          # Enable CORS (Cross-Origin Resource Sharing) for HTTP requests
          cors: true
    iamRoleStatements:
      # Allow the function to perform UpdateItem actions on the DynamoDB table resource
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      # Allow the function to perform the PutTraceSegments and PutTelemetryRecords actions on all resources
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # DeleteItem function 
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: items/{itemId}/attachment
          # Enable CORS (Cross-Origin Resource Sharing) for HTTP requests
          cors: true
    iamRoleStatements:
      # Allow the function to perform PutObject and GetObject actions on the S3 resource
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      # Allow the function to perform UpdateItem action on the Table DB resource
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      # Allow the function to perform the PutTraceSegments and PutTelemetryRecords actions on all resources
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  
  # SearchItems function
  SearchItems:
    handler: src/lambda/http/searchItem.handler
    events:
      - http:
          method: get
          authorizer: Auth
          path: search
          cors: true
          request:
            parameters:
              querystrings:
                key: true      
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}

# define resources
resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like.
    # "By default, handle HTTP errors in the 4xx range (client errors). Specifically, errors such as 400 Bad Request, 401 Unauthorized, 404 Not Found, etc." 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          # Allow all origins to access 4xx error requests by setting the value '*
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          # Allow the methods 'GET, OPTIONS, POST, PUT, PATCH, DELETE'
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        # To reference the ApiGatewayRestApi resource to determine the API Gateway that this resource applies to
        RestApiId:
          Ref: ApiGatewayRestApi
    
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    CouresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        # Identify the primary key of the DynamoDB table.
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        #Billing based on the actual number of read and write requests
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEMS_TABLE}
        # Define a local secondary index
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ITEMS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # S3 configs Properties
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        # Define public access block configuration for S3 bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        # Configure CORS (Cross-Origin Resource Sharing) for the S3 bucket
        CorsConfiguration:
          CorsRules:
            # Allowed to send CORS requests. In this case, '*' allows all origins
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PolicyID
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        # This policy applies to the bucket named AttachmentsBucket
        Bucket: !Ref AttachmentsBucket
    
    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Item Image bucket topic
        TopicName: ${self:custom.topicName}
    # Define Simple Notification Service
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: sns:Publish
              Resource: !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}
        # This policy applies to the Topic named ImagesTopic
        Topics:
          - !Ref ImagesTopic